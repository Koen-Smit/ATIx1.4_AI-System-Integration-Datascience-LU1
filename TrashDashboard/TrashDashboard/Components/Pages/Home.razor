@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ApiClient ApiClient
@inject Authorization Authorization
@inject NavigationManager NavigationManager
@using System.Globalization

<PageTitle>Home</PageTitle>

<div class="position-relative mb-5 text-center">
    <span>Laatste update @mostRecentDate</span>
    <button type="button" @onclick="GoTable" class="btn btn-secondary position-absolute top-0 start-0">Historie</button>
    <button type="button" class="btn btn-secondary position-absolute top-0 end-0" @onclick="Logout">Uitloggen</button>
</div>


<div class="container-fluid">
    <!-- Stack vertically on mobile, side by side on medium+ screens -->
    <div class="row">
        <!-- Left Section - Form and Chart -->
        <div class="col-md-6 custom-left d-flex flex-column p-3 p-md-4">
            <div class="d-flex justify-content-between">
                <div>
                </div>
                <div>
                    @* <p class="btn btn-light bg-light color-light">@dateText</p> *@
                </div>
                <button class="btn color-light btn-light" @onclick="OpenModal" >
                    Info
                </button>

                @if (showModal)
                {
                    <div class="modal fade show d-block" tabindex="-1" style="color: black">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Uitleg</h5>
                                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                                </div>
                                <div class="modal-body">
                                    <p>
                                        Op dit dashboard krijg je inzicht in zwerfafvalverwachtingen op basis van locatie en omgevingsfactoren. Voer een postcode, datum, temperatuur en tijd in. Klik op 'Toon voorspelling' om te zien hoeveel zwerfafval er verwacht wordt. De grafiek toont het verwachte aantal stuks afval per tijdstip van de dag. Aan de rechterkant zie je een weeroverzicht en een kaart van de stad met locaties waar voorspellingen relevant zijn.
                                    </p>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn btn-secondary" @onclick="CloseModal">Sluiten</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="row g-3">
                <div class="col-12 col-sm-6">
                    <label for="datum" class="form-label">Datum</label>
                    <InputDate id="datum" class="form-control" @bind-Value="Datum" />
                </div>
                <div class="col-12 col-sm-6">
                    <label for="temperatuur" class="form-label">Minimum temperatuur</label>
                    <div class="input-group">
                        <InputNumber id="temperatuur" class="form-control" @bind-Value="MinTemperatuur" />
                        <span class="input-group-text">°C</span>
                    </div>
                </div>
            </div>

            <div class="mt-3 d-flex justify-content-center">
                <button class="btn color-light btn-light px-4" @onclick="ShowVoorspelling">Toon voorspelling</button>
            </div>

            <div class="chart-container mt-3">
                <canvas id="afvalChart"></canvas>
            </div>

            @* <h4 class="mt-3 mt-md-5 pt-2 pb-2 color-light rounded text-center btn-light">Ophaalprioriteit: gemiddeld</h4> *@

            <div class="row g-3">
                <div class="col-12 col-sm-6">
                    <label for="predictdatum" class="form-label">Datum</label>
                    <InputDate id="predictdatum" class="form-control" @bind-Value="PredictDatum1" />
                </div>
                <div class="col-12 col-sm-6">
                    <label for="predictdatum2" class="form-label">Second Datum</label>
                    <InputDate id="predictdatum2" class="form-control" @bind-Value="PredictDatum2" />
                </div>
            </div>
            <div class="chart-container mt-3">
                <canvas id="voorspellingChart"></canvas>
            </div>
        </div>

        <!-- Right Section - Weather and Map -->
        <div class="col-md-6 custom-right d-flex flex-column p-3 p-md-4">
            <div class="order-md-1">
                <h3 class="color-light text-center text-md-start">Weeroverzicht</h3>
                <div class="weather-chart-container">
                    <canvas id="weerChart"></canvas>
                </div>
            </div>

            <div class="order-md-3 mt-3 mt-md-5">
                <h3 class="color-light text-center text-md-start">Kaart van Breda</h3>
                <div class="map-container mt-2">
                    <RealTimeMap @ref="_map" height="50vh" Parameters="@parameters"></RealTimeMap>
                </div>
            </div>
        </div>
    </div>

    @* <Button Color="ButtonColor.Primary" >Show Employee Component</Button> *@

</div>



@code {
    private List<Trash> trashList;
    private List<Trash> trashListToShow;

    private string dateText = "Trash history";

    private string Postcode { get; set; } = "";
    private DateTime Datum { get; set; } = DateTime.Today;
    private double MinTemperatuur { get; set; } = 10;
    private string Temperatuur { get; set; } = "";
    private string Tijd { get; set; } = "";
    private Random random = new();
    private DateTime? mostRecentDate;
    private int[] afvalPerUur = new int[]
    {
        2, 4, 6, 3, 5, 7, 4, 6, 8, 10, 6, 3, 2
    };
    private WeatherData? weatherData;
    private string[] weerLabels = Array.Empty<string>();
    private double[] temperaturen = Array.Empty<double>();

    private int[] afvalPerWeek = new int[7];
    private DateTime[] weekDates = new DateTime[7];

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing...");

        if (!Authorization.IsLoggedIn())
        {
            NavigationManager.NavigateTo("/login");
        }

        trashList = await ApiClient.GetAllTrash();
        Console.WriteLine($"Trash list count: {trashList?.Count}");

        mostRecentDate = GetMostRecentTrashDate();

        var today = DateTime.Today;
        for (int i = 0; i < 7; i++)
        {
            weekDates[i] = today.AddDays(-6 + i);
            afvalPerWeek[i] = 0;
        }

        if (trashList != null && trashList.Any())
        {
            var availableDates = trashList
                .Select(t => t.DateCollected.Date)
                .Distinct()
                .OrderBy(d => d)
                .ToList();

            var recentDates = availableDates
                .Where(d => d <= today)
                .TakeLast(7)
                .ToList();

            if (recentDates.Count < 7)
            {
                var daysMissing = 7 - recentDates.Count;
                var firstDate = recentDates.FirstOrDefault(today);
                for (int i = 0; i < daysMissing; i++)
                {
                    recentDates.Insert(0, firstDate.AddDays(-i - 1));
                }
            }

            for (int i = 0; i < 7; i++)
            {
                weekDates[i] = recentDates[i];
                afvalPerWeek[i] = trashList.Count(t => t.DateCollected.Date == recentDates[i]);

            }
            trashListToShow = trashList
                .Where(t => recentDates.Contains(t.DateCollected.Date))
                .OrderBy(t => t.DateCollected)
                .ToList();
        }


        if (trashList != null && trashList.Any())
        {
            var sortedTrash = trashList.OrderByDescending(t => t.DateCollected).ToList();
            var recentTrash = sortedTrash.Take(8).ToList();

            weatherData = new WeatherData
                {
                    Dates = recentTrash.Select(t => t.DateCollected.ToString("dd/MM/yyyy")).ToArray(),
                    Temperaturen = recentTrash.Select(t => t.Temperatuur).ToArray(),
                    WeerOmschrijvingen = recentTrash.Select(t => t.WeerOmschrijving ?? string.Empty).ToArray()
                };

            weerLabels = weatherData.Dates;
            temperaturen = weatherData.Temperaturen;
        }

        await MapLoaded(51.591737f, 4.779559f, "Camera1");
        var dateLabels = weekDates.Select(d => d.ToString("dd/MM")).ToArray();

    }

    private DateTime _predictDatum1 = DateTime.Now.AddDays(1);
    private DateTime _predictDatum2 = DateTime.Now.AddDays(1);

    private DateTime[] predictionDates;

    // private int[] predictionTrash = [7];
    private string[] colorArray = ["red"];
    // private string[] strings = [DateTime.Now.ToString("dd/MM", CultureInfo.InvariantCulture)];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dateLabels = weekDates.Select(d => d.ToString("dd/MM", CultureInfo.InvariantCulture)).ToArray();
            await JS.InvokeVoidAsync("renderAfvalChart", afvalPerWeek, dateLabels);


            await Task.Delay(100);

            if (weatherData != null && weatherData.Temperaturen.Any())
            {
                Console.WriteLine("Rendering weer chart with data");
                await JS.InvokeVoidAsync("renderWeerChart",
                    weatherData.Temperaturen,
                    weatherData.WeerOmschrijvingen,
                    weatherData.Dates);
            }
            await JS.InvokeVoidAsync("renderAfvalChart", afvalPerWeek, dateLabels);
        }
        await JS.InvokeVoidAsync("console.log", "HEEELPPP 222", afvalPerWeek);
        await ShowVoorspelling();


        await RenderPredictionChart();
    }
    private async Task RenderPredictionChart()
    {
        PredictDatum1 = PredictDatum1.Date;
        PredictDatum2 = PredictDatum2.Date;
        // Determine the correct start and end dates (inclusive)
        DateTime start = DateTime.Compare(PredictDatum1, PredictDatum2) < 0 ? PredictDatum1 : PredictDatum2;
        DateTime end = DateTime.Compare(PredictDatum1, PredictDatum2) > 0 ? PredictDatum1 : PredictDatum2;

        int totalDays = (end - start).Days + 1; // Include both dates

        // Resize arrays to match total days
        PredictedTrash[] predictionTrash = new PredictedTrash[totalDays];
        predictionDates = new DateTime[totalDays];
        colorArray = new string[totalDays];

        for (int i = 0; i < totalDays; i++)
        {
            var currentDate = start.AddDays(i);
            //apicall to get predicted info
            // await JS.InvokeVoidAsync("console.log", currentDate);

            predictionTrash[i] = await ApiClient.GetPredictedTrash(currentDate);
        }
        // await JS.InvokeVoidAsync("console.log", predictionTrash);

        string[] datesAsString = new string[predictionDates.Length];
        int[] predictionTrashAmounts = new int[predictionDates.Length];

        for (int i = 0; i < predictionTrash.Count(); i++)
        {
            datesAsString[i] = predictionTrash[i].Date.ToString("dd/MM", CultureInfo.InvariantCulture);
            predictionTrashAmounts[i] = predictionTrash[i].PredictedWasteCount;
            if (predictionTrash[i].IsHoliday)
            {
                colorArray[i] = "#000000";
            }
            else
            {
                colorArray[i] = "#727272";
            }
        }
        await JS.InvokeVoidAsync("renderVoorspellingChart", predictionTrashAmounts, datesAsString, colorArray);
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        await RenderPredictionChart();
    }

    private DateTime PredictDatum1
    {
        get => _predictDatum1;
        set
        {
            if (_predictDatum1 != value)
            {
                _predictDatum1 = value;
                _ = RenderPredictionChart(); // fire-and-forget async call
            }
        }
    }

    private DateTime PredictDatum2
    {
        get => _predictDatum2;
        set
        {
            if (_predictDatum2 != value)
            {
                _predictDatum2 = value;
                _ = RenderPredictionChart(); // fire-and-forget async call
            }
        }
    }

    private async Task ShowVoorspelling()
    {
        var filteredTrash = trashList?
            .Where(t => t.DateCollected >= Datum && t.DateCollected < Datum.AddDays(7))
            .Where(t => t.Temperatuur >= MinTemperatuur)
            .ToList();
        var colors = new string[7];

        if (filteredTrash != null && filteredTrash.Any())
        {
            var dailyData = filteredTrash
                .GroupBy(t => t.DateCollected.Date)
                .OrderBy(g => g.Key)
                .Take(7)
                .ToList();

            for (int i = 0; i < 7; i++)
            {
                var currentDate = Datum.AddDays(i);
                weekDates[i] = currentDate;

                List<Trash> dayData = trashListToShow
                .Where(t => t.DateCollected.Date == currentDate)
                .ToList();

                int count = dayData.Count;
                afvalPerWeek[i] = count;

                // Determine base color based on trash amount
                string baseColor;
                if (count > 100)
                {
                    baseColor = "250, 0, 3";     // High Priority - red
                }
                else if (count > 50)
                {
                    baseColor = "250, 161, 0";   // Medium Priority - orange
                }
                else if (count > 10)
                {
                    baseColor = "198, 249, 1";   // Low Priority - yellow-green
                }
                else if (count > 0)
                {
                    baseColor = "2, 248, 18";    // No Priority - green
                }
                else
                {
                    baseColor = "204, 204, 204"; // Default - grey
                }

                // Determine opacity based on DagCategorie
                string dagCategorie = dayData.FirstOrDefault()?.DagCategorie?.ToLower() ?? "werkdag";
                double opacity = dagCategorie switch
                {
                    "holiday" => 1.0,
                    "weekend" => 0.6,
                    _ => 0.3 // Treat unknown or "werkdag" as default
                };

                // Combine into RGBA
                colors[i] = $"rgba({baseColor}, {opacity.ToString("0.0", System.Globalization.CultureInfo.InvariantCulture)})";

            }
        }
        else
        {
            for (int i = 0; i < 7; i++)
            {
                var currentDate = Datum.AddDays(i);
                weekDates[i] = currentDate;
                afvalPerWeek[i] = 0;
                colors[i] = currentDate > DateTime.Today ? "red" : "blue"; // 🔴🔵 coloring
            }
        }

        var dateLabels = weekDates.Select(d => d.ToString("dd/MM")).ToArray();
        await JS.InvokeVoidAsync("renderAfvalChart", afvalPerWeek, dateLabels, colors);
        await JS.InvokeVoidAsync("console.log", afvalPerWeek, dateLabels, colors);

        dateText = Datum > DateTime.Now ? "Predicted Trash" : "Trash History";

    }


    private RealTimeMap _map;

    private RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters
        {
            location = new RealTimeMap.Location
            {
                latitude = 51.587533,
                longitude = 4.775072,
            },
            zoomLevel = 2
        };



    private async Task MapLoaded(float latitude, float longitude, string name)
    {
        var point = new RealTimeMap.StreamPoint
            {
                guid = Guid.NewGuid(),
                timestamp = DateTime.Now,
                latitude = latitude,
                longitude = longitude,
                type = name
            };

        await _map.Geometric.Points.add(point);
    }

    private DateTime? GetMostRecentTrashDate()
    {
        if (trashList == null || !trashList.Any())
        {
            return null;
        }

        return trashList.Max(t => t.DateCollected);
    }

    private bool showModal = false;

    private void OpenModal()
    {
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }
    
    public void Logout()
    {
        Authorization.Logout();
        if (!Authorization.IsLoggedIn())
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void GoTable()
    {
        NavigationManager.NavigateTo("/table");
    }
}