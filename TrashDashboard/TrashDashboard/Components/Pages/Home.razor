@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ApiClient ApiClient
@inject Authorization Authorization
@inject NavigationManager NavigationManager
@using System.Globalization

<PageTitle>Home</PageTitle>

<div class="d-flex justify-content-center mb-5">
    <span>Laatste update @mostRecentDate</span>
</div>

<div class="container-fluid">
    <!-- Stack vertically on mobile, side by side on medium+ screens -->
    <div class="row">
        <!-- Left Section - Form and Chart -->
        <div class="col-md-6 custom-left d-flex flex-column p-3 p-md-4">
            <div class="d-flex justify-content-end">
                <button class="btn color-light btn-light"
                        onclick="alert('Op dit dashboard krijg je inzicht in zwerfafvalverwachtingen op basis van locatie en omgevingsfactoren. Voer een postcode, datum, temperatuur en tijd in. Klik op 'Toon voorspelling' om te zien hoeveel zwerfafval er verwacht wordt. De grafiek toont het verwachte aantal stuks afval per tijdstip van de dag. Aan de rechterkant zie je een weeroverzicht en een kaart van de stad met locaties waar voorspellingen relevant zijn.')">
                    Info
                </button>
            </div>

            <div class="row g-3">
                <div class="col-12 col-sm-6">
                    <label for="datum" class="form-label">Datum</label>
                    <InputDate id="datum" class="form-control" @bind-Value="Datum" />
                </div>
                <div class="col-12 col-sm-6">
                    <label for="temperatuur" class="form-label">Minimum temperatuur</label>
                    <div class="input-group">
                        <InputNumber id="temperatuur" class="form-control" @bind-Value="MinTemperatuur" />
                        <span class="input-group-text">°C</span>
                    </div>
                </div>
            </div>

            <div class="mt-3 d-flex justify-content-center">
                <button class="btn color-light btn-light px-4" @onclick="ShowVoorspelling">Toon voorspelling</button>
            </div>

            <div class="chart-container mt-3">
                <canvas id="afvalChart"></canvas>
            </div>

            <h4 class="mt-3 mt-md-5 pt-2 pb-2 color-light rounded text-center btn-light">Ophaalprioriteit: gemiddeld</h4>
        </div>

        <!-- Right Section - Weather and Map -->
        <div class="col-md-6 custom-right d-flex flex-column p-3 p-md-4">
            <div class="order-md-1">
                <h3 class="color-light text-center text-md-start">Weeroverzicht</h3>
                <div class="weather-chart-container">
                    <canvas id="weerChart"></canvas>
                </div>
            </div>

            <div class="order-md-3 mt-3 mt-md-5">
                <h3 class="color-light text-center text-md-start">Kaart van Breda</h3>
                <div class="map-container mt-2">
                    <RealTimeMap @ref="_map" height="50vh" Parameters="@parameters"></RealTimeMap>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string Postcode { get; set; } = "";
    private DateTime Datum { get; set; } = DateTime.Today;
    private double MinTemperatuur { get; set; } = 10;
    private string Temperatuur { get; set; } = "";
    private string Tijd { get; set; } = "";
    private Random random = new();
    private DateTime? mostRecentDate;
    private int[] afvalPerUur = new int[]
    {
        2, 4, 6, 3, 5, 7, 4, 6, 8, 10, 6, 3, 2
    };
    private WeatherData? weatherData;
    private string[] weerLabels = Array.Empty<string>();
    private double[] temperaturen = Array.Empty<double>();

    private int[] afvalPerWeek = new int[7];
    private DateTime[] weekDates = new DateTime[7];

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing...");

        if (!Authorization.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }

        trashList = await ApiClient.GetAllTrash();
        Console.WriteLine($"Trash list count: {trashList?.Count}");

        mostRecentDate = GetMostRecentTrashDate();

        var today = DateTime.Today;
        for (int i = 0; i < 7; i++)
        {
            weekDates[i] = today.AddDays(-6 + i);
            afvalPerWeek[i] = 0;
        }

        if (trashList != null && trashList.Any())
        {
            var availableDates = trashList
                .Select(t => t.DateCollected.Date)
                .Distinct()
                .OrderBy(d => d)
                .ToList();

            var recentDates = availableDates
                .Where(d => d <= today)
                .TakeLast(7)
                .ToList();

            if (recentDates.Count < 7)
            {
                var daysMissing = 7 - recentDates.Count;
                var firstDate = recentDates.FirstOrDefault(today);
                for (int i = 0; i < daysMissing; i++)
                {
                    recentDates.Insert(0, firstDate.AddDays(-i - 1));
                }
            }

            for (int i = 0; i < 7; i++)
            {
                weekDates[i] = recentDates[i];
                afvalPerWeek[i] = trashList.Count(t => t.DateCollected.Date == recentDates[i]);
            }
        }


        if (trashList != null && trashList.Any())
        {
            var sortedTrash = trashList.OrderByDescending(t => t.DateCollected).ToList();
            var recentTrash = sortedTrash.Take(8).ToList();

            weatherData = new WeatherData
                {
                    Dates = recentTrash.Select(t => t.DateCollected.ToString("dd/MM/yyyy")).ToArray(),
                    Temperaturen = recentTrash.Select(t => t.Temperatuur).ToArray(),
                    WeerOmschrijvingen = recentTrash.Select(t => t.WeerOmschrijving ?? string.Empty).ToArray()
                };

            weerLabels = weatherData.Dates;
            temperaturen = weatherData.Temperaturen;
        }

        await MapLoaded(51.591737f, 4.779559f, "Camera1");
        var dateLabels = weekDates.Select(d => d.ToString("dd/MM")).ToArray();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dateLabels = weekDates.Select(d => d.ToString("dd/MM", CultureInfo.InvariantCulture)).ToArray();
            await JS.InvokeVoidAsync("renderAfvalChart", afvalPerWeek, dateLabels);


            await Task.Delay(100);

            if (weatherData != null && weatherData.Temperaturen.Any())
            {
                Console.WriteLine("Rendering weer chart with data");
                await JS.InvokeVoidAsync("renderWeerChart",
                    weatherData.Temperaturen,
                    weatherData.WeerOmschrijvingen,
                    weatherData.Dates);
            }
            await JS.InvokeVoidAsync("renderAfvalChart", afvalPerWeek, dateLabels);
        }
    }

    private async Task ShowVoorspelling()
    {
        var filteredTrash = trashList?
            .Where(t => t.DateCollected >= Datum && t.DateCollected < Datum.AddDays(7))
            .Where(t => t.Temperatuur >= MinTemperatuur)
            .ToList();

        if (filteredTrash != null && filteredTrash.Any())
        {
            var dailyData = filteredTrash
                .GroupBy(t => t.DateCollected.Date)
                .OrderBy(g => g.Key)
                .Take(7)
                .ToList();

            for (int i = 0; i < 7; i++)
            {
                var currentDate = Datum.AddDays(i);
                weekDates[i] = currentDate;

                var dayData = dailyData.FirstOrDefault(g => g.Key == currentDate);
                afvalPerWeek[i] = dayData?.Count() ?? 0;
            }
        }
        else
        {
            for (int i = 0; i < 7; i++)
            {
                weekDates[i] = Datum.AddDays(i);
                afvalPerWeek[i] = 0;
            }
        }

        var dateLabels = weekDates.Select(d => d.ToString("dd/MM")).ToArray();
        await JS.InvokeVoidAsync("renderAfvalChart", afvalPerWeek, dateLabels);
    }


    private List<Models.Trash> trashList;
    private RealTimeMap _map;

    private RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters
        {
            location = new RealTimeMap.Location
            {
                latitude = 51.587533,
                longitude = 4.775072,
            },
            zoomLevel = 2
        };



    private async Task MapLoaded(float latitude, float longitude, string name)
    {
        var point = new RealTimeMap.StreamPoint
            {
                guid = Guid.NewGuid(),
                timestamp = DateTime.Now,
                latitude = latitude,
                longitude = longitude,
                type = name
            };

        await _map.Geometric.Points.add(point);
    }

    private DateTime? GetMostRecentTrashDate()
    {
        if (trashList == null || !trashList.Any())
        {
            return null;
        }

        return trashList.Max(t => t.DateCollected);
    }
}